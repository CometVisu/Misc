/* cometvisu.script - CometVisu plymouth theme
 *
 * Copyright (C) 2015 Christian Mayer <mail at christianmayer.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * Written by: Christian Mayer
 * Based on the plymouth script demo
 */

Window.SetBackgroundTopColor   ( 0.4, 0.4, 0.4 );
Window.SetBackgroundBottomColor( 0.0, 0.0, 0.0 );

logo.image = Image( "cometvisu_splashlogo_512_ff8000.png" );

// Database for the different coloured sprinkles
sprinkle = [];
sprinkle[0] = Image( "sprinkle_00ddff.png" );
sprinkle[1] = Image( "sprinkle_00ff11.png" );
sprinkle[2] = Image( "sprinkle_d00555.png" );
sprinkle[3] = Image( "sprinkle_ff0000.png" );
sprinkle[4] = Image( "sprinkle_ffffff.png" );
sprinkleSize = 5;
sprinkleCurrent = 4;

// Structure for the positioned sprinkles
sprinklePos = [];
sprinklePos[0] = Sprite( sprinkle[0] );
sprinklePos[1] = Sprite( sprinkle[1] );
sprinklePos[2] = Sprite( sprinkle[2] );
sprinklePos[3] = Sprite( sprinkle[3] );
sprinklePosSize = 4;
sprinklePosCurrent = 0;

logo.sprite = Sprite( logo.image );
logo.x = Window.GetX() + Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2;
logo.y = Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2;
logo.sprite.SetX( logo.x );
logo.sprite.SetY( logo.y );
refreshTime = 0;
refreshTimeSwitch = 20;

fun refresh_callback()
{
  if( status == "normal" )
  {
    if( 0 == refreshTime % refreshTimeSwitch )
    {
      // switch color of one sprinkle
      sprinklePos[ sprinklePosCurrent ].SetImage( sprinkle[ sprinkleCurrent ] );
      sprinkleCurrent = (sprinkleCurrent+1) % sprinkleSize;
      sprinklePosCurrent = (sprinklePosCurrent+1) % sprinklePosSize;
      sprinklePos[0].SetPosition( logo.x + 347    , logo.y + 42   , 1000 );
      sprinklePos[1].SetPosition( logo.x + 347+ 77, logo.y + 42+15, 1000 );
      sprinklePos[2].SetPosition( logo.x + 347+ 36, logo.y + 42+56, 1000 );
      sprinklePos[3].SetPosition( logo.x + 347+120, logo.y + 42+44, 1000 );
    }

    // update opacity of all sprinkles
    for( index = 0; index < sprinklePosSize; index++ )
    {
      oa = 2*3.14 * (refreshTime / (refreshTimeSwitch*sprinklePosSize) + index/sprinklePosSize);
      o = (Math.Sin( oa ) + 1) / 2;
      sprinklePos[index].SetOpacity( o );
    }
    refreshTime = (refreshTime + 1) % (refreshTimeSwitch * sprinklePosSize);
  }
  else
  {
    logo.sprite.SetX( 0 );
    logo.sprite.SetY( 0 );
    logo.sprite.SetOpacity( 1 );
    for( index = 0; index < sprinklePosSize; index++ )
      sprinklePos[index].SetOpacity( 0 );
  }
}
  
Plymouth.SetRefreshFunction( refresh_callback );

#----------------------------------------- Dialog ----------------------------------

status = "normal";

fun dialog_setup()
{
  local.box;
  local.lock;
  local.entry;
    
  box.image = Image( "box.png" );
  lock.image = Image( "lock.png" );
  entry.image = Image( "entry.png" );
    
  box.sprite = Sprite( box.image );
  box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
  box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
  box.z = 10000;
  box.sprite.SetPosition( box.x, box.y, box.z );
    
  lock.sprite = Sprite( lock.image );
  lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
  lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
  lock.z = box.z + 1;
  lock.sprite.SetPosition( lock.x, lock.y, lock.z );
    
  entry.sprite = Sprite( entry.image );
  entry.x = lock.x + lock.image.GetWidth();
  entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
  entry.z = box.z + 1;
  entry.sprite.SetPosition( entry.x, entry.y, entry.z );
    
  global.dialog.box = box;
  global.dialog.lock = lock;
  global.dialog.entry = entry;
  global.dialog.bullet_image = Image( "bullet.png" );
  dialog_opacity(1);
}
    
fun dialog_opacity( opacity )
{
  dialog.box.sprite.SetOpacity( opacity );
  dialog.lock.sprite.SetOpacity( opacity );
  dialog.entry.sprite.SetOpacity( opacity );
  for( index = 0; dialog.bullet[index]; index++ )
  {
    dialog.bullet[index].sprite.SetOpacity( opacity );
  }
}

fun display_normal_callback()
{
  global.status = "normal";
  if( global.dialog )
    dialog_opacity( 0 );
}

fun display_password_callback( prompt, bullets )
{
  global.status = "password";
  if( !global.dialog )
    dialog_setup();
  else
    dialog_opacity( 1 );

  for( index = 0; dialog.bullet[index] || index < bullets; index++ )
  {
    if( !dialog.bullet[index] )
    {
      dialog.bullet[index].sprite = Sprite( dialog.bullet_image );
      dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
      dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
      dialog.bullet[index].z = dialog.entry.z + 1;
      dialog.bullet[index].sprite.SetPosition( dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z );
    }
    if( index < bullets )
      dialog.bullet[index].sprite.SetOpacity( 1 );
    else
      dialog.bullet[index].sprite.SetOpacity( 0 );
  }
}

Plymouth.SetDisplayNormalFunction( display_normal_callback );
Plymouth.SetDisplayPasswordFunction( display_password_callback );

#----------------------------------------- Progress Bar --------------------------------

progress_box.image = Image( "progress_box_ff8000.png" );
progress_box.sprite = Sprite( progress_box.image );

progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = Window.GetY() + Window.GetHeight() * 0.75 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition( progress_box.x, progress_box.y, 0 );

progress_bar.original_image = Image( "progress_bar_ff8000.png" );
progress_bar.sprite = Sprite();

progress_bar.x = Window.GetX() + Window.GetWidth()  / 2 -        progress_bar.original_image.GetWidth() / 2;
progress_bar.y = Window.GetY() + Window.GetHeight() / 2 * 1.5  - progress_box.image.GetHeight() / 2 + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition( progress_bar.x, progress_bar.y, 1 );

fun progress_callback( duration, progress )
{
  if( progress_bar.image.GetWidth() != Math.Int( progress_bar.original_image.GetWidth() * progress) ) 
  {
    progress_bar.image = progress_bar.original_image.Scale( progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight() );
    progress_bar.sprite.SetImage( progress_bar.image );
  }
}

Plymouth.SetBootProgressFunction( progress_callback );

#----------------------------------------- Quit --------------------------------

fun quit_callback()
{
  logo.sprite.SetOpacity( 1 );
}

Plymouth.SetQuitFunction( quit_callback );

#----------------------------------- Update Message --------------------------------
# called by update

message_sprites = [];
message_sprite_count = 0;
message_sprite_y = 50 + progress_bar.y;
message_sprite_scroll = 0;

fun display_message_callback( text )
{
  if( message_sprite_scroll )
  {
    for( index = 0; index < message_sprite_count; index++ )
      message_sprites[index].SetImage( message_sprites[index+1].GetImage() );
  }
  message_image = Image.Text( text, 1, 1, 1 );
  message_sprites[message_sprite_count] = Sprite( message_image );
  message_sprites[message_sprite_count].SetPosition( 10, message_sprite_y, 10000 );

  if( (message_sprite_y+2*message_image.GetHeight()) >= Window.GetHeight() )
  {
    message_sprite_scroll = 1;
  }  
  else
  {
    message_sprite_count++;
    message_sprite_y += message_image.GetHeight();
  }
}

fun hide_message_callback( text )
{
  for( i = 0; i < message_sprite_count; i++ )
  {
    if (message_sprites[i].text == text)
      message_sprites[i] = NULL;
  }
}

Plymouth.SetUpdateStatusFunction( display_message_callback );
Plymouth.SetDisplayMessageFunction( display_message_callback );
Plymouth.SetHideMessageFunction( hide_message_callback );

#----------------------------------------- Message --------------------------------
# called by display-message

message_sprite = Sprite();

fun message_callback( text )
{
  message_image = Image.Text( text, 0.9, 0.9, 0.9 );
  message_sprite.SetImage( message_image );
  message_sprite.SetX( Window.GetWidth()  / 2 - message_image.GetWidth()  / 2 );
  message_sprite.SetY( (Window.GetHeight() * 0.7) - (2 * message_image.GetHeight()) );
  message.sprite.SetZ( 1100 );  
}

Plymouth.SetMessageFunction( message_callback );

