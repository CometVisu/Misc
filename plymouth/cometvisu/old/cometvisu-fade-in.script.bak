# CometVisu plymouth theme
#
# (c) Christian Mayer under GPL v3

# Globals:
CometVisuLogo = "CometVisu_logo_ff8000_1000.png";
NUM_SCROLL_LINES=5;
LINE_WIDTH=55;


# Setup general display
cometvisu_image = Image( CometVisuLogo );

#Window.SetBackgroundTopColor (0.66, 0.66, 0.66);       #top 
#Window.SetBackgroundBottomColor (0.146, 0.146, 0.146); #bottom
Window.SetBackgroundTopColor (0.96, 0.66, 0.66);       #top 
Window.SetBackgroundBottomColor (0.146, 0.146, 0.946); #bottom

cometvisu_sprite = Sprite( cometvisu_image );
cometvisu_sprite.SetX( Window.GetWidth()  / 2 - cometvisu_sprite.GetImage().GetWidth()  / 2 );
cometvisu_sprite.SetY( Window.GetHeight() / 2 - cometvisu_sprite.GetImage().GetHeight() / 2 );
cometvisu_sprite.SetZ( -100 );

# define dynamic functions
fun progress_callback( duration, progress )
{
  progress_status = "We have waited " + time + "seconds and we are "+ (progress * 100) + "% though";
  progress_image = Image.Text( progress_status, 0.9, 0.9, 0.9 );
  progress_sprite = Sprite( progress_image );
  progress_sprite.SetX( 10 );
  progress_sprite.SetY( 10 );
  progress_sprite.SetZ( 100 );
  
}

Plymouth.SetBootProgressFunction( progress_callback );

# Test Text
TestText = "sdfg fdsg sdg ww gwergwg ew g";
tti = Image.Text( TestText, 0.9, 0.9, 0.9 );
tts = Sprite( tti );
tts.SetPosition( 20, 20, 10000 );

// Initialising text images and their positions
// 20 is the height (including line spacing) of each line
for (i=0; i < NUM_SCROLL_LINES; i++) {
  lines[i]= Image.Text("", 0.9, 0.9, 0.9);
  message_sprite[i] = Sprite();
  message_sprite[i].SetPosition(screen_width * 0.2, (screen_height * 0.6) + (i * 20), 10000);
}
 
// From ubuntu-logo
fun StringLength(string) {
 
  index = 0;
  str = String(string);
  while(str.CharAt(index)) index++;
  return index;
}
 
fun scroll_message_callback(text) {
 
   // Truncate the message if too long
   if (StringLength(text) > LINE_WIDTH) {
     text = text.SubString(0, LINE_WIDTH - 3);
     text += "...";
   }
 
   // Shift message one up
   for (i = 0; i < NUM_SCROLL_LINES - 1; i++) {
     lines[i] = lines[i+1];
   }
 
   // Create the image for the latest message
   lines[i] = Image.Text(text, 0.9, 0.9, 0.9);
 
   // Re-positioning the text images
   for (i = 0; i < NUM_SCROLL_LINES; i++) {
     message_sprite[i].SetImage(lines[i]);
   }
}
 
Plymouth.SetUpdateStatusFunction(scroll_message_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
	my_image = Image.Text(text, 0.6, 0.6, 0.6);
	message_sprite.SetImage(my_image);
	message_sprite.SetX(Window.GetWidth ()  / 2 - my_image.GetWidth()  / 2);
	message_sprite.SetY((Window.GetHeight () * 0.7) - (2 * my_image.GetHeight()));
	message.sprite.SetZ(11);	
}

Plymouth.SetMessageFunction(message_callback);
